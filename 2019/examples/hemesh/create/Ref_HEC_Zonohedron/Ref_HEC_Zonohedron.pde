import wblut.processing.*;
import wblut.hemesh.*;
import wblut.geom.*;
import wblut.core.*;
import wblut.math.*;

WB_Mesh  zono;
WB_Vector[] vectors;
WB_Vector[] axes;
int n;
WB_Render3D render;
WB_GeometryFactory gf=new WB_GeometryFactory();
HE_Mesh mesh;

//A zonohedron is the convex hull of the point cloud generated by all combination of a fixed set of base vectors

void setup() {
  size(1000, 1000, P3D);
  smooth(8);
  render=new WB_Render3D(this);
  n=8;
  vectors=new WB_Vector[n];
  axes=new WB_Vector[n];
  for (int i=0; i<n; i++) {
    //vectors for the zonohedron
    vectors[i]=gf.createNormalizedVector(random(-1.0, 1.0), random(-1.0, 1.0), random(-1.0, 1.0));
    //rotation axis for the vector rotation
    axes[i]=gf.createNormalizedVector(random(-1.0, 1.0), random(-1.0, 1.0), random(-1.0, 1.0));
  }
  zono=gf.createZonohedron(vectors, 40);
  mesh=new HE_Mesh(zono);
  mesh.stats();
}

void draw() {
  background(50);
  directionalLight(255, 255, 255, 1, 1, -1);
  directionalLight(127, 127, 127, -1, -1, 1);
  scale(1);
  translate(width/2, height/2, 0);
  rotateY(mouseX*1.0f/width*TWO_PI);
  rotateX(mouseY*1.0f/height*TWO_PI);
  noStroke();
  render.drawFaces(mesh);
  stroke(0);
  render.drawEdges(mesh);
  update();
}

void update() {
  for (int i=0; i<n; i++) {
    vectors[i].rotateAboutAxis2PSelf(0.01, axes[i], WB_Point.ZERO());
  }

  zono=gf.createZonohedron(vectors, 40);
  mesh=new HE_Mesh(zono);
 
}


void mousePressed(){
  java.util.Date dNow = new java.util.Date( );
      java.text.SimpleDateFormat ft = 
      new java.text.SimpleDateFormat ("yyyy_MM_dd_hhmmss_S");

     
saveFrame("d:/screenshots/"+this.getClass().getName()+"/"+this.getClass().getName()+"_"+ft.format(dNow)+  ".png"); 
}